// Mocks generated by Mockito 5.2.0 from annotations
// in webauthn/test/authenticator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i3;
import 'package:local_auth/src/local_auth.dart' as _i7;
import 'package:local_auth_android/local_auth_android.dart' as _i8;
import 'package:local_auth_ios/local_auth_ios.dart' as _i9;
import 'package:local_auth_windows/local_auth_windows.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i6;
import 'package:webauthn/src/db/credential.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCredential_0 extends _i1.Fake implements _i2.Credential {}

class _FakeIOSOptions_1 extends _i1.Fake implements _i3.IOSOptions {}

class _FakeAndroidOptions_2 extends _i1.Fake implements _i3.AndroidOptions {}

class _FakeLinuxOptions_3 extends _i1.Fake implements _i3.LinuxOptions {}

class _FakeWindowsOptions_4 extends _i1.Fake implements _i3.WindowsOptions {}

class _FakeWebOptions_5 extends _i1.Fake implements _i3.WebOptions {}

class _FakeMacOsOptions_6 extends _i1.Fake implements _i3.MacOsOptions {}

/// A class which mocks [CredentialSchema].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialSchema extends _i1.Mock implements _i2.CredentialSchema {
  MockCredentialSchema() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Credential> insert(_i2.Credential? data) =>
      (super.noSuchMethod(Invocation.method(#insert, [data]),
              returnValue: Future<_i2.Credential>.value(_FakeCredential_0()))
          as _i4.Future<_i2.Credential>);
  @override
  _i4.Future<bool> update(_i2.Credential? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<int> incrementUseCounter(int? id, [int? inc = 1]) =>
      (super.noSuchMethod(Invocation.method(#incrementUseCounter, [id, inc]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<bool> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Credential?> getById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i2.Credential?>.value())
          as _i4.Future<_i2.Credential?>);
  @override
  _i4.Future<_i2.Credential?> getByKeyId(_i5.Uint8List? keyId) =>
      (super.noSuchMethod(Invocation.method(#getByKeyId, [keyId]),
              returnValue: Future<_i2.Credential?>.value())
          as _i4.Future<_i2.Credential?>);
  @override
  _i4.Future<_i2.Credential?> getByKeyAlias(String? alias) =>
      (super.noSuchMethod(Invocation.method(#getByKeyAlias, [alias]),
              returnValue: Future<_i2.Credential?>.value())
          as _i4.Future<_i2.Credential?>);
  @override
  _i4.Future<List<_i2.Credential>> getByRpId(String? rpId) =>
      (super.noSuchMethod(Invocation.method(#getByRpId, [rpId]),
              returnValue:
                  Future<List<_i2.Credential>>.value(<_i2.Credential>[]))
          as _i4.Future<List<_i2.Credential>>);
  @override
  _i4.Future<T> transaction<T>(
          _i4.Future<T> Function(_i6.Transaction)? action) =>
      (super.noSuchMethod(Invocation.method(#transaction, [action]),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> execute<T>(
          _i4.Future<T> Function(_i6.DatabaseExecutor)? action) =>
      (super.noSuchMethod(Invocation.method(#execute, [action]),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i3.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.IOSOptions get iOptions =>
      (super.noSuchMethod(Invocation.getter(#iOptions),
          returnValue: _FakeIOSOptions_1()) as _i3.IOSOptions);
  @override
  _i3.AndroidOptions get aOptions =>
      (super.noSuchMethod(Invocation.getter(#aOptions),
          returnValue: _FakeAndroidOptions_2()) as _i3.AndroidOptions);
  @override
  _i3.LinuxOptions get lOptions =>
      (super.noSuchMethod(Invocation.getter(#lOptions),
          returnValue: _FakeLinuxOptions_3()) as _i3.LinuxOptions);
  @override
  _i3.WindowsOptions get wOptions =>
      (super.noSuchMethod(Invocation.getter(#wOptions),
          returnValue: _FakeWindowsOptions_4()) as _i3.WindowsOptions);
  @override
  _i3.WebOptions get webOptions =>
      (super.noSuchMethod(Invocation.getter(#webOptions),
          returnValue: _FakeWebOptions_5()) as _i3.WebOptions);
  @override
  _i3.MacOsOptions get mOptions =>
      (super.noSuchMethod(Invocation.getter(#mOptions),
          returnValue: _FakeMacOsOptions_6()) as _i3.MacOsOptions);
  @override
  _i4.Future<void> write(
          {String? key,
          String? value,
          _i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> read(
          {String? key,
          _i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<bool> containsKey(
          {String? key,
          _i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> delete(
          {String? key,
          _i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<Map<String, String>> readAll(
          {_i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions,
                #webOptions: webOptions,
                #mOptions: mOptions,
                #wOptions: wOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i4.Future<Map<String, String>>);
  @override
  _i4.Future<void> deleteAll(
          {_i3.IOSOptions? iOptions,
          _i3.AndroidOptions? aOptions,
          _i3.LinuxOptions? lOptions,
          _i3.WebOptions? webOptions,
          _i3.MacOsOptions? mOptions,
          _i3.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [], {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i7.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get canCheckBiometrics =>
      (super.noSuchMethod(Invocation.getter(#canCheckBiometrics),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> authenticate(
          {String? localizedReason,
          Iterable<_i8.AuthMessages>? authMessages = const [
            _i9.IOSAuthMessages(),
            _i8.AndroidAuthMessages(),
            _i10.WindowsAuthMessages()
          ],
          _i8.AuthenticationOptions? options =
              const _i8.AuthenticationOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticate, [], {
            #localizedReason: localizedReason,
            #authMessages: authMessages,
            #options: options
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> stopAuthentication() =>
      (super.noSuchMethod(Invocation.method(#stopAuthentication, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isDeviceSupported() =>
      (super.noSuchMethod(Invocation.method(#isDeviceSupported, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i8.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(Invocation.method(#getAvailableBiometrics, []),
              returnValue:
                  Future<List<_i8.BiometricType>>.value(<_i8.BiometricType>[]))
          as _i4.Future<List<_i8.BiometricType>>);
}
